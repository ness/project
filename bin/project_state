#!/usr/bin/env bash

old_IFS=$IFS
IFS=$'\n'
SOURCE_DIRS=( $(project_configuration show --key source_dirs --format newline) )
IFS=$old_IFS

is_dir_repo () {
    if [ -d $1/.git ]; then
        return 0
    fi
    return 1
}

restore () {
	case $1 in
		master) 
			for sdir in $PROJECT_DIR/../$SOURCE_DIRS; do
				echo $sdir
				for repo in $sdir/* ; do
					echo $repo
					if is_dir_repo $repo; then
						git --work-tree=$repo --git-dir=$repo/.git checkout $1 
					fi
				done
			done
			;;
		*)
			for repo in ${SOURCE_DIRS[@]}; do
				repo_dir=$PROJECT_DIR/../$repo
				if is_dir_repo $repo; then
					period_escaped_repo=${repo//[.]/\\\.}
					branch=$(project_configuration show --key states.$1.$period_escaped_repo --format shell)
					echo $repo  -  $branch
					git --work-tree=$repo --git-dir=$repo/.git checkout $branch
				fi
			done
			;;
	esac
}

record () {
	for repo in ${SOURCE_DIRS[@]}; do
		repo_dir=$PROJECT_DIR/../$repo
		if is_dir_repo $repo; then
			branch=$(git --work-tree=$repo_dir --git-dir=$repo_dir/.git symbolic-ref -q --short HEAD || git --work-tree=$repo_dir --git-dir=$repo_dir/.git describe --tags --exact-match HEAD 2>/dev/null || git --work-tree=$repo_dir --git-dir=$repo_dir/.git rev-parse -q HEAD)
			period_escaped_repo=${repo//[.]/\\\.}
			project_configuration modify --key states.$1.$period_escaped_repo --value $branch
		fi
	done
}

case "$1" in
	record)
		record $2
		;;
	restore)
		restore $2
		;;
esac
